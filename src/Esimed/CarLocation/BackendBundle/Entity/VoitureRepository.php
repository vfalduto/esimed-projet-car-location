<?php

namespace Esimed\CarLocation\BackendBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * VoitureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoitureRepository extends EntityRepository {

    /**
     * @param $agence
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function loadDispoForAgence($agence) {
        return $this->createQueryBuilder('v')
            ->where('v.agence = :agence')
            ->orWhere('v.stationneAgence = :agence')
            ->andWhere('v.supprimee = false')
            ->orderBy('v.marque', 'ASC')
            ->orderBy('v.modele', 'ASC')
            ->setParameter('agence', $agence)
        ;
    }

    /**
     * @param $agence
     * @param $data
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function search($agence, $data) {
        $q = $this->createQueryBuilder('v')
            ->where('v.agence = :agence')
            ->orWhere('v.stationneAgence = :agence')
            ->andWhere('v.supprimee = false')
            ->orderBy('v.marque', 'ASC')
            ->orderBy('v.modele', 'ASC')
            ->setParameter('agence', $agence);

        $data['categorie'] = array();
        if (count($data['categorieUtilitaire']) > 0) {
            $data['categorie'] = $data['categorieUtilitaire']->toArray();
            unset($data['categorieUtilitaire']);
        }

        if (count($data['categorieTourisme']) > 0) {
            $data['categorie'] = array_merge($data['categorie'], $data['categorieTourisme']->toArray());
            unset($data['categorieTourisme']);
        }

        /**
         * parcours des champs
         * création de la clause where si au moins un element présent
         */
        foreach ($data as $field => $values) {
            if (count($data[$field]) > 0) {
                $q
                    ->andWhere("v." . $field .  " in (:" . $field . ")")
                    ->setParameter($field, $data[$field]);
            }
        }
        return $q;
    }

    /**
     * recherche pour une location
     * @param Location $entity
     * @return \Doctrine\ORM\AbstractQuery
     */
    public function filter(Location $entity) {

        $rsmBuilder = new \Doctrine\ORM\Query\ResultSetMappingBuilder($this->getEntityManager());
        $rsmBuilder->addRootEntityFromClassMetadata('Esimed\CarLocation\BackendBundle\Entity\Voiture', 'v');

        //filtre les voitures sup et celle ou le permis n'est pas valide
        $qry  = 'SELECT v.* FROM voiture v '
            . ' left JOIN location l ON l.voiture_id = v.id LEFT JOIN facture f ON l.id = f.location_id'
            . ' WHERE v.supprimee = false ';

        if ($entity->getClient()) {
            $clientAge = $entity->getClient()->getAge($entity->getDateDepart());
            $clientAgePermis = $entity->getClient()->getAgePermis($entity->getDateDepart());

            $qry .= ' AND v.age_minimum <= ' . $clientAge;
            !$clientAgePermis && $qry .= ' AND v.nb_annee_permis <= ' . $clientAgePermis;
        }


        if ($entity->getId()) {
            //edition on retire l'id de la location pour ne pas la prendre en compte
            $qry .= ' AND l.id != ' . $entity->getId();
        }

        //filtre par date de depart et par lieux de stationnement
       if ($entity->getDateDepart() && $entity->getDateArrivee()) {
            $dateFin = null;
            $dateDeb = "STR_TO_DATE('". $entity->getDateDepart()->format("Y-m-d-H.i.s") ."', '%Y-%m-%d-%H.%i.%s')";
            $dateFin = "STR_TO_DATE('". $entity->getDateArrivee()->format("Y-m-d-H.i.s") ."', '%Y-%m-%d-%H.%i.%s')";

            //vérification des disponibilités
            $subqry = " select max(l2.date_depart) from location as l2 left JOIN facture f ON l2.id = f.location_id "
                . " where l2.voiture_id = v.id "
                . " AND (l2.etat not in ('" . Location::$ETAT_CLOTURE ."','" . Location::$ETAT_ARCHIVE . "') or f.location_id is not null) "
                . " AND l2.date_depart <= " . $dateDeb;

            //edition on retire l'id de la location pour ne pas la prendre en compte
            $entity->getId() && $subqry .= " AND l2.id != " . $entity->getId();

            //disponibilité d'un véhicule ayant déja des locations
            //vérifie la position du véhicule a la date t
            $case1 = " l.date_depart in (" . $subqry . ") AND l.agence_arrive_id = " . $entity->getAgenceDepart()->getId()
                //retire les locations non facturé
                . " AND (l.etat not in ('" . Location::$ETAT_CLOTURE ."','" . Location::$ETAT_ARCHIVE . "') or f.location_id is not null) ";

            //vérifie que le véhicule n'as pas de location à cette date
            $case1 .= " AND (" . $dateDeb . " < l.date_depart OR " . $dateDeb . " > l.date_arrivee) ";
            $case1 .= " AND (" . $dateFin . " < l.date_depart OR " . $dateFin . " > l.date_arrivee) ";

           //verification de la date d'arrivée
           $subqry2 = "select l3.voiture_id from location as l3 left JOIN facture f ON l3.id = f.location_id " .
               "where " . $dateDeb ." BETWEEN l3.date_depart AND l3.date_arrivee " .
               " OR ".$dateFin . "  BETWEEN l3.date_depart AND l3.date_arrivee ";

           $case1 .= " AND v.id NOT IN (" . $subqry2 . ") ";

            //disponibilité des voitures sans locations
            $case2 = " l.id is null AND v.stationne_agence_id = " . $entity->getAgenceDepart()->getId(); //aucune location précédante

            $qry .= ' AND ( (' . $case1 . ') OR ('. $case2 . ') )';

           //echo $qry;
            return $this->getEntityManager()->createNativeQuery(
                $qry,
                $rsmBuilder)->getResult();
        }

        return array();
    }

    /**
     * charge les marques des véhicules pour le filtre de recherche
     * @return array
     */
    public function loadMarques() {

        $q = $this->createQueryBuilder('c')->groupBy('c.marque');
        $voitures = $q->getQuery()->getResult();

        $marques = array();
        foreach($voitures as $marque) {
            $marques[$marque->getMarque()] = $marque->getMarque();
        }
        return $marques;
    }
}